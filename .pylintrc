# Python code to execute, usually for sys.path manipulation such as pygtk.require().
# init-hook="from pylint.config import find_pylintrc; import os, sys; sys.path.append(os.path.dirname(find_pylintrc()))"

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the number of processors available to use.
jobs=0

# Control the amount of potential inferred values when inferring a single object. This can help the performance when dealing with large functions or complex, nested conditions.
limit-inference-results=100

# List of plugins (as comma separated values of python modules names) to load, usually to register additional checkers.
# load-plugins=

# Pickle collected data for later comparisons.
persistent=yes

# Specify a configuration file.
# rcfile=

# When enabled, pylint would attempt to guess common misconfiguration and emit user-friendly hints instead of false-positive error messages.
suggestion-mode=yes

# Allow loading of arbitrary C extensions. Extensions are imported into the active Python interpreter and may run arbitrary code.
# unsafe-load-any-extension=no


[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
# confidence=

# Disable the message, report, category or checker with the given id(s). You can either give multiple identifiers separated by comma (,) or put this option multiple times (only on the command line, not in the configuration file where it should appear only once). You can also use "--disable=all" to disable everything first and then reenable specific checks. For example, if you want to run only the similarities checker, you can use "--disable=all --enable=similarities". If you want to run only the classes checker, but have no Warning level messages displayed, use "--disable=all --enable=classes --disable=W".
disable=W1203,
        print-statement,
        parameter-unpacking,
        unpacking-in-except,
        old-raise-syntax,
        backtick,
        long-suffix,
        old-ne-operator,
        old-octal-literal,
        import-star-module-level,
        non-ascii-bytes-literal,
        raw-checker-failed,
        bad-inline-option,
        locally-disabled,
        file-ignored,
        suppressed-message,
        useless-suppression,
        deprecated-pragma,
        use-symbolic-message-instead,
        apply-builtin,
        basestring-builtin,
        buffer-builtin,
        cmp-builtin,
        coerce-builtin,
        execfile-builtin,
        file-builtin,
        long-builtin,
        raw_input-builtin,
        reduce-builtin,
        standarderror-builtin,
        unicode-builtin,
        xrange-builtin,
        coerce-method,
        delslice-method,
        getslice-method,
        setslice-method,
        no-absolute-import,
        old-division,
        dict-iter-method,
        dict-view-method,
        next-method-called,
        metaclass-assignment,
        indexing-exception,
        raising-string,
        reload-builtin,
        oct-method,
        hex-method,
        nonzero-method,
        cmp-method,
        input-builtin,
        round-builtin,
        intern-builtin,
        unichr-builtin,
        map-builtin-not-iterating,
        zip-builtin-not-iterating,
        range-builtin-not-iterating,
        filter-builtin-not-iterating,
        using-cmp-argument,
        eq-without-hash,
        div-method,
        idiv-method,
        rdiv-method,
        exception-message-attribute,
        invalid-str-codec,
        sys-max-int,
        bad-python3-import,
        deprecated-string-function,
        deprecated-str-translate-call,
        deprecated-itertools-function,
        deprecated-types-field,
        next-method-defined,
        dict-items-not-iterating,
        dict-keys-not-iterating,
        dict-values-not-iterating,
        deprecated-operator-function,
        deprecated-urllib-function,
        xreadlines-attribute,
        deprecated-sys-function,
        exception-escape,
        comprehension-escape

# Enable the message, report, category or checker with the given id(s). You can either give multiple identifier separated by comma (,) or put this option multiple time (only on the command line, not in the configuration file where it should appear only once). See also the "--disable" option for examples.
# enable=c-extension-no-member


[REPORTS]

# Python expression which should return a note less than 10 (10 is the highest note). You have access to the variables errors warning, statement which respectively contain the number of errors / warnings messages and the total number of statements analyzed. This is used by the global evaluation report (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details.
#msg-template=

# Set the output format. Available formats are text, parseable, colorized, json and msvs (visual studio). You can also give a reporter class, e.g. mypackage.mymodule.MyReporterClass.
output-format=text

# Tells whether to display a full report or only the messages.
reports=no

# Activate the evaluation score.
score=yes


[REFACTORING]

# Maximum number of nested blocks for function / method body
max-nested-blocks=6

# Complete name of functions that never returns. When checking for inconsistent-return-statements if a never returning function is called then it will be considered as an explicit return statement and no message will be printed.
# never-returning-functions=sys.exit


[BASIC]

# Naming style matching correct argument names.
argument-naming-style=camelCase

# Naming style matching correct attribute names.
attr-naming-style=camelCase

# Bad variable names which should always be refused, separated by a comma.
# bad-names=foo, bar, baz, toto, tutu, tata

# Naming style matching correct class attribute names.
class-attribute-naming-style=any

# Naming style matching correct class names.
class-naming-style=PascalCase

# Naming style matching correct constant names.
const-naming-style=UPPER_CASE

# Minimum line length for functions/classes that require docstrings, shorter ones are exempt.
docstring-min-length=-1

# Naming style matching correct function names.
function-naming-style=camelCase

# Good variable names which should always be accepted, separated by a comma.
# good-names=i, j, k, ex, Run, _

# Включите подсказку для правильного формата именования с недопустимым именем.
# Include a hint for the correct naming format with invalid-name.
include-naming-hint=no

# Naming style matching correct inline iteration names.
inlinevar-naming-style=any

# Naming style matching correct method names.
method-naming-style=camelCase

# Naming style matching correct module names.
module-naming-style=camelCase

# Colon-delimited sets of names that determine each other's naming style when the name regexes allow several styles.
# name-group=

# Регулярное выражение, которое должно соответствовать только именам функций или классов, для которых не требуется строка документации.
# Regular expression which should only match function or class names that do not require a docstring.
no-docstring-rgx=^_

# List of decorators that produce properties, such as abc.abstractproperty. Add to this list to register other decorators that produce valid properties.
# These decorators are taken in consideration only for invalid-name.
# property-classes=abc.abstractproperty

# Naming style matching correct variable names.
variable-naming-style=camelCase


[FORMAT]

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
# expected-line-ending-format=

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# Строка, используемая в качестве единицы отступа. Обычно это "    " (4 пробела) или "\t" (1 табуляция).
# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1 tab).
indent-string='    '

# Maximum number of characters on a single line.
max-line-length=100

# Maximum number of lines in a module.
max-module-lines=1000

# List of optional constructs for which whitespace checking is disabled. `dict- separator` is used to allow tabulation in dicts, etc.: {1  : 1,\n222: 2}. `trailing-comma` allows a space between comma and closing bracket: (a, ). `empty-line` allows space-only lines.
no-space-check=trailing-comma,
               dict-separator

# Разрешите, чтобы тело класса находилось в той же строке, что и объявление, если тело содержит один оператор.
# Allow the body of a class to be on the same line as the declaration if body contains single statement.
single-line-class-stmt=no

# Позвольте телу if находиться в той же строке, что и тест, если больше ничего нет.
# Allow the body of an if to be on the same line as the test if there is no else.
single-line-if-stmt=no


[LOGGING]

# Стиль формата, используемый для проверки строки формата ведения журнала. "старый" означает использование форматирования %, в то время как "новый" предназначен для форматирования "{}".
# Format style used to check logging format string. `old` means using % formatting, while `new` is for `{}` formatting.
logging-format-style=new

# Logging modules to check that the string format arguments are in logging function parameter format.
logging-modules=logging


[MISCELLANEOUS]

# Список тегов заметок, которые следует принять во внимание, разделенных запятой.
# List of note tags to take in consideration, separated by a comma.
notes=FIXME,
      NOTE,
      TODO,
      REVIEW


[SIMILARITIES]

# Игнорируйте комментарии при вычислении сходств.
# Ignore comments when computing similarities.
ignore-comments=yes

# Игнорируйте строки документации при вычислении сходств.
# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Игнорируйте импорт при вычислении сходств.
# Ignore imports when computing similarities.
ignore-imports=no

# Минимальное количество строк сходства.
# Minimum lines number of a similarity.
min-similarity-lines=4


[SPELLING]

# Ограничивает количество выданных предложений по исправлению орфографических ошибок.
# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions=4

# Spelling dictionary name. Available dictionaries: none. To make it working install python-enchant package..
# spelling-dict=

# Список слов, разделенных запятыми, которые не следует проверять.
# List of comma separated words that should not be checked.
spelling-ignore-words=promocode

# Путь к файлу, содержащему закрытый словарь; по одному слову в строке.
# spelling-private-dict-file=

# Tells whether to store unknown words to indicated private dictionary in --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words=no


[TYPECHECK]

# Список декораторов, которые создают контекстные менеджеры, такие как contextlib.contextmanager. Добавьте в этот список, чтобы зарегистрировать другие декораторы, которые создают допустимые контекстные менеджеры.
# List of decorators that produce context managers, such as contextlib.contextmanager. Add to this list to register other decorators that produce valid context managers.
contextmanager-decorators=contextlib.contextmanager

# List of members which are set dynamically and missed by pylint inference system, and so shouldn't trigger E1101 when accessed. Python regular expressions are accepted.
# generated-members=

# Указывает, следует ли игнорировать отсутствующие элементы, к которым осуществляется доступ в классе mixin. Класс mixin обнаруживается, если его имя заканчивается на "mixin" (без учета регистра).
# Tells whether missing members accessed in mixin class should be ignored. A mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# Указывает, следует ли предупреждать об отсутствующих элементах, если предполагается, что владельцем атрибута является None.
# Tells whether to warn about missing members when the owner of the attribute is inferred to be None.
ignore-none=yes

# Этот флаг определяет, должен ли pylint предупреждать об отсутствии элемента и подобных проверках всякий раз, когда при выводе возвращается непрозрачный объект. Вывод может возвращать несколько потенциальных результатов при вычислении объекта Python, но некоторые ветви могут не быть вычислены, что приводит к частичному выводу. В этом случае, возможно, было бы полезно по-прежнему выдавать no-member и другие проверки для остальных выводимых объектов.
# This flag controls whether pylint should warn about no-member and similar checks whenever an opaque object is returned when inferring. The inference can return multiple potential results while evaluating a Python object, but some branches might not be evaluated, which results in partial inference. In that case, it might be useful to still emit no-member and other checks for the rest of the inferred objects.
ignore-on-opaque-inference=yes

# Список имен классов, для которых атрибуты-члены проверять не следует (полезно для классов с динамически заданными атрибутами). Это поддерживает использование полных имен.
# List of class names for which member attributes should not be checked (useful for classes with dynamically set attributes). This supports the use of qualified names.
ignored-classes=optparse.Values,thread._local,_thread._local

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis. It
# supports qualified module names, as well as Unix pattern matching.
# ignored-modules=

# Показывать подсказку с возможными именами, если имя участника не было найдено. Аспект поиска подсказки основан на расстоянии редактирования.
# Show a hint with possible names when a member name was not found. The aspect of finding the hint is based on edit distance.
missing-member-hint=yes

# The minimum edit distance a name should have in order to be considered a similar match for a missing member name.
missing-member-hint-distance=1

# Общее количество похожих имен, которые следует принимать во внимание при отображении подсказки для отсутствующего участника.
# The total number of similar names that should be taken in consideration when showing a hint for a missing member.
missing-member-max-choices=6


[VARIABLES]

# List of additional names supposed to be defined in builtins. Remember that you should avoid defining new builtins when possible.
# additional-builtins=

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables=yes

# Список строк, которые могут идентифицировать функцию обратного вызова по имени. Имя обратного вызова должно начинаться или заканчиваться одной из этих строк.
# List of strings which can identify a callback function by name. A callback name must start or end with one of those strings.
callbacks=cb_,
          _cb

# Регулярное выражение, совпадающее с именем фиктивных переменных (т.е. ожидается, что оно не будет использоваться).
# A regular expression matching the name of dummy variables (i.e. expected to not be used).
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

# Имена аргументов, соответствующие этому выражению, будут проигнорированы. По умолчанию используется имя с начальным подчеркиванием.
# Argument names that match this expression will be ignored. Default to name with leading underscore.
ignored-argument-names=_.*|^ignored_|^unused_

# Tells whether we should check for unused import in __init__ files.
init-import=no

# Список квалифицированных имен модулей, которые могут содержать объекты, способные переопределять встроенные модули.
# List of qualified module names which can have objects that can redefine builtins.
redefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io


[CLASSES]

# Список имен методов, используемых для объявления (т.е. назначения) атрибутов экземпляра.
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,
                      __new__,
                      setUp

# Список имен участников, которые должны быть исключены из предупреждения о защищенном доступе.
# List of member names, which should be excluded from the protected access warning.
exclude-protected=_asdict,
                  _fields,
                  _replace,
                  _source,
                  _make

# Список допустимых имен для первого аргумента в методе класса.
# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# Список допустимых имен для первого аргумента в методе класса metaclass.
valid-metaclass-classmethod-first-arg=cls


[DESIGN]

# Maximum number of arguments for function / method.
max-args=100

# Maximum number of attributes for a class (see R0902).
max-attributes=100

# Maximum number of boolean expressions in an if statement.
max-bool-expr=10

# Максимальное количество ветвей для тела функции/метода.
# Maximum number of branch for function / method body.
max-branches=12

# Максимальное количество локальных значений для тела функции/метода.
# Maximum number of locals for function / method body.
max-locals=200

# Максимальное количество родителей в классе (see R0901).
# Maximum number of parents for a class (see R0901).
max-parents=7

# Максимальное количество общедоступных методов для класса (see R0904).
# Maximum number of public methods for a class (see R0904).
max-public-methods=200

# Maximum number of return / yield for function / method body.
max-returns=20

# Maximum number of statements in function / method body.
max-statements=2000

# Minimum number of public methods for a class (see R0903).
min-public-methods=0


[IMPORTS]

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all=yes

# Проанализируйте импорт резервных блоков. Это может быть использовано для поддержки кода, совместимого как с Python 2, так и с Python 3, что означает, что блок может содержать код, который существует только в том или ином интерпретаторе, что приводит к ложным срабатываниям при анализе.
# Analyse import fallback blocks. This can be used to support both Python 2 and 3 compatible code, which means that the block might have code that exists only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no

# Deprecated modules which should not be used, separated by a comma.
deprecated-modules=optparse,tkinter.tix

# Create a graph of external dependencies in the given file (report RP0402 must not be disabled).
# ext-import-graph=

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled).
# import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must not be disabled).
# int-import-graph=

# Принудительный импорт для распознавания модуля как части стандартных библиотек совместимости.
# Force import order to recognize a module as part of the standard compatibility libraries.
# known-standard-library=

# Force import order to recognize a module as part of a third party library.
known-third-party=enchant


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to "Exception".
overgeneral-exceptions=Exception